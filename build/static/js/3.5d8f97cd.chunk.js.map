{"version":3,"file":"static/js/3.5d8f97cd.chunk.js","mappings":"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","sources":["../node_modules/@moxiworks/mds/dist/esm/minWidthSync-ff38ec9f.js","../node_modules/@moxiworks/mds/dist/esm/mx-fab.entry.js","../node_modules/@moxiworks/mds/dist/esm/ripple-140c6d57.js"],"sourcesContent":["const SCREENS = {\n  'sm': '640px',\n  'md': '768px',\n  'lg': '1024px',\n  'xl': '1280px',\n  '2xl': '1536px',\n};\n/** A key-value pair of breakpoint abbreviations and a boolean for whether the `min-width` meets or exceeds it.\nFor example, `MinWidths.md` will be true for windows that are tablet-sized or larger */\nclass MinWidths {\n  constructor() {\n    this['sm'] = false;\n    this['md'] = false;\n    this['lg'] = false;\n    this['xl'] = false;\n    this['2xl'] = false;\n  }\n}\nclass MinWidthSync {\n  constructor() {\n    this.componentRefs = [];\n    this.minWidths = new MinWidths();\n    this.listeners = new Map();\n  }\n  subscribeComponent(componentRef) {\n    // If this is the first subscribed component, set up listeners.\n    if (this.componentRefs.length === 0)\n      this.addListeners();\n    this.componentRefs.push(componentRef);\n    // Immediately sync minWidths to component.\n    componentRef.minWidths = Object.assign({}, this.minWidths);\n  }\n  addListeners() {\n    Object.keys(SCREENS).forEach(screen => {\n      const mql = window.matchMedia(`(min-width: ${SCREENS[screen]})`);\n      const listener = (e) => {\n        this.minWidths[screen] = e.matches;\n        // Sync minWidths to all subscribed components\n        this.componentRefs.forEach(componentRef => {\n          componentRef.minWidths = Object.assign({}, this.minWidths);\n        });\n      };\n      listener(mql);\n      mql.addListener(listener);\n      this.listeners.set(mql, listener); // Store listener so it can be removed later\n    });\n  }\n  unsubscribeComponent(componentRef) {\n    this.componentRefs = this.componentRefs.filter(c => c !== componentRef);\n    // If no more subscribed components, remove listeners to prevent memory leaks.\n    if (this.componentRefs.length === 0)\n      this.removeListeners();\n  }\n  removeListeners() {\n    this.listeners.forEach((listener, mql) => {\n      mql.removeListener(listener);\n    });\n  }\n}\n/** Update subscribed components' `minWidths` state object based on `min-width` media query listeners. */\nconst minWidthSync = new MinWidthSync();\n\nexport { MinWidths as M, minWidthSync as m };\n","import { r as registerInstance, h, H as Host, g as getElement } from './index-42f8725f.js';\nimport { r as ripple } from './ripple-140c6d57.js';\nimport { M as MinWidths, m as minWidthSync } from './minWidthSync-ff38ec9f.js';\n\nconst MxFab = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** Style as a secondary action */\n    this.secondary = false;\n    this.minWidths = new MinWidths();\n    this.isExtended = false;\n  }\n  connectedCallback() {\n    minWidthSync.subscribeComponent(this);\n  }\n  componentWillLoad() {\n    this.isExtended = !!this.element.textContent;\n  }\n  disconnectedCallback() {\n    minWidthSync.unsubscribeComponent(this);\n  }\n  onClick(e) {\n    ripple(e, this.buttonElem);\n  }\n  get buttonClass() {\n    let str = 'flex min-w-full items-center justify-center rounded-full shadow-4 relative overflow-hidden';\n    if (this.secondary)\n      str += ' secondary';\n    if (this.isExtended)\n      str += ' h-48 py-16 px-24';\n    else\n      str += this.minWidths.md ? ' h-56' : ' h-40';\n    return str;\n  }\n  get slotWrapperClass() {\n    let str = 'flex items-center text-4 tracking-1-25 leading-4 uppercase font-semibold';\n    if (this.isExtended && this.icon)\n      str += ' ml-12';\n    return str;\n  }\n  render() {\n    return (h(Host, { class: 'mx-fab inline-block min-w-max' + (this.minWidths.md ? ' w-56' : ' w-40') }, h(\"button\", { ref: el => (this.buttonElem = el), type: \"button\", value: this.value, class: this.buttonClass, \"aria-label\": this.elAriaLabel, onClick: this.onClick.bind(this) }, this.icon && h(\"i\", { class: this.icon + ' text-1' }), h(\"div\", { class: this.slotWrapperClass }, h(\"slot\", null)))));\n  }\n  get element() { return getElement(this); }\n};\n\nexport { MxFab as mx_fab };\n","function ripple(e, elem) {\n  const existingRipple = elem.querySelector('.ripple');\n  if (existingRipple)\n    existingRipple.remove();\n  // Create span element\n  const ripple = document.createElement('span');\n  // Add ripple class to span\n  ripple.classList.add('ripple');\n  // Add span to the button\n  elem.prepend(ripple);\n  // Set the size of the span element\n  const diameter = Math.max(elem.clientWidth, elem.clientHeight);\n  ripple.style.width = ripple.style.height = diameter + 'px';\n  // Position the span element\n  const elemOffset = elem.getBoundingClientRect();\n  // Center over click coords OR over top left corner if activated by keypress\n  const left = Math.max(e.clientX - elemOffset.left, 0);\n  const top = Math.max(e.clientY - elemOffset.top, 0);\n  ripple.style.left = left - diameter / 2 + 'px';\n  ripple.style.top = top - diameter / 2 + 'px';\n  // Remove span after 0.3s\n  setTimeout(() => {\n    ripple.remove();\n  }, 300);\n}\n\nexport { ripple as r };\n"],"names":["SCREENS","MinWidths","this","minWidthSync","MinWidthSync","componentRefs","minWidths","listeners","Map","componentRef","length","addListeners","push","Object","assign","keys","forEach","screen","mql","window","matchMedia","listener","e","matches","addListener","set","filter","c","removeListeners","removeListener","MxFab","hostRef","registerInstance","secondary","isExtended","element","textContent","ripple","buttonElem","str","md","icon","h","Host","class","ref","el","type","value","buttonClass","elAriaLabel","onClick","bind","slotWrapperClass","getElement","elem","existingRipple","querySelector","remove","document","createElement","classList","add","prepend","diameter","Math","max","clientWidth","clientHeight","style","width","height","elemOffset","getBoundingClientRect","left","clientX","top","clientY","setTimeout"],"sourceRoot":""}