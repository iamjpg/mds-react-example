{"version":3,"file":"static/js/188.54197b1d.chunk.js","mappings":"gNAEMA,EAAW,GAEXC,GAAUD,EADE,KACsB,EAClCE,EAAgB,EAAIC,KAAKC,GAAKH,EAC9BI,EAAkB,WACtB,WAAYC,IAAS,gBACnBC,EAAAA,EAAAA,GAAiBC,KAAMF,GAEvBE,KAAKC,MAAQ,KAEbD,KAAKE,KAAO,OAEZF,KAAKG,yBAA2B,KAEhCH,KAAKI,YAAc,CACpB,CAXqB,+CAYtB,WAAmB,WACjBC,cAAcL,KAAKM,0BACdN,KAAKG,2BAEVH,KAAKM,yBAA2BC,aAAY,WACvB,MAAf,EAAKN,QAET,EAAKA,MAAQN,KAAKa,KAAK,EAAKP,OAAS,GAAK,EAAG,IAC9C,GAAED,KAAKG,yBAA2B,KACpC,GArBqB,+BAsBtB,WAAoB,WAClBH,KAAKS,mBACAT,KAAKI,cAGVJ,KAAKU,QAAQC,UAAUC,OAAO,SAC9BZ,KAAKU,QAAQC,UAAUE,IAAI,UAC3Bb,KAAKc,aAAeC,YAAW,WAC7B,EAAKL,QAAQC,UAAUC,OAAO,UAC9B,EAAKF,QAAQC,UAAUE,IAAI,QAC5B,GAAEb,KAAKI,aACT,GAjCqB,kCAkCtB,WACEY,aAAahB,KAAKc,aACnB,GApCqB,qBAqCtB,WACE,IAAMG,EAAQ,CAAEC,MAAOlB,KAAKE,KAAMiB,OAAQnB,KAAKE,MAO/C,OALkB,MAAdF,KAAKC,MACPgB,EAAMG,UAAY,iBAGlBH,EAAMI,UAAY,4BACbJ,CACR,GA9CqB,uBA+CtB,WACE,IAAMA,EAAQ,CAAEK,OAAQ,gBAaxB,OAZkB,MAAdtB,KAAKC,OAEPgB,EAAMM,WAAa,sDACnBN,EAAMO,gBAAkB9B,EAAc+B,QAAQ,GAC9CR,EAAMS,mBAAsB,IAAM1B,KAAKC,OAAS,IAAOP,GAAe+B,QAAQ,GAAK,OAInFR,EAAMO,gBAAkB,cACxBP,EAAMS,iBAAmB,IACzBT,EAAMI,UAAY,2CAEbJ,CACR,GA9DqB,oBA+DtB,WACE,OAAQU,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,CAAEX,MAAOjB,KAAK6B,UAAWC,MAAO,wDAAyDC,KAAM,cAAe,gBAA+B,MAAd/B,KAAKC,MAAgBN,KAAKqC,MAAMhC,KAAKC,OAAS,KAAM,gBAA+B,MAAdD,KAAKC,MAAgB,EAAI,KAAM,gBAA+B,MAAdD,KAAKC,MAAgB,IAAM,OAAQ0B,EAAAA,EAAAA,GAAE,MAAO,CAAEG,MAAO,yDAA0DH,EAAAA,EAAAA,GAAE,MAAO,CAAEG,MAAO,WAAYG,QAAS,CAACzC,EAAW,EAAGA,EAAW,EAAGA,EAAUA,GAAU0C,KAAK,OAAQP,EAAAA,EAAAA,GAAE,SAAU,CAAEV,MAAOjB,KAAKmC,YAAaC,GAAI5C,EAAU6C,GAAI7C,EAAU8C,EAAG7C,EAAQ,eAnExhB,IAmEmjB8C,KAAM,WACxkB,GAjEqB,mBAkEtB,WAAgB,OAAOC,EAAAA,EAAAA,GAAWxC,KAAQ,IAlEpB,qBAmEtB,WAAwB,MAAO,CAC7B,yBAA4B,CAAC,oBAC3B,KArEkB,I","sources":["../node_modules/@moxiworks/mds/dist/esm/mx-circular-progress.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host, g as getElement } from './index-42f8725f.js';\n\nconst DIAMETER = 44;\nconst THICKNESS = 3.6;\nconst RADIUS = (DIAMETER - THICKNESS) / 2;\nconst CIRCUMFERENCE = 2 * Math.PI * RADIUS;\nconst MxCircularProgress = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** The progress percentage from 0 to 100. If not provided (or set to `null`), an indeterminate progress indicator will be displayed. */\n    this.value = null;\n    /** The value to use for the width and height */\n    this.size = '3rem';\n    /** If provided, the indicator will simulate progress toward 99% over the given duration (milliseconds). */\n    this.simulateProgressDuration = null;\n    /** Delay the appearance of the indicator for this many milliseconds */\n    this.appearDelay = 0;\n  }\n  simulateProgress() {\n    clearInterval(this.simulateProgressInterval);\n    if (!this.simulateProgressDuration)\n      return;\n    this.simulateProgressInterval = setInterval(() => {\n      if (this.value === 100)\n        return;\n      this.value = Math.min((this.value || 0) + 1, 99);\n    }, this.simulateProgressDuration / 100);\n  }\n  connectedCallback() {\n    this.simulateProgress();\n    if (!this.appearDelay)\n      return;\n    // Hide indicator until appearDelay duration has passed\n    this.element.classList.remove('block');\n    this.element.classList.add('hidden');\n    this.delayTimeout = setTimeout(() => {\n      this.element.classList.remove('hidden');\n      this.element.classList.add('block');\n    }, this.appearDelay);\n  }\n  disconnectedCallback() {\n    clearTimeout(this.delayTimeout);\n  }\n  get hostStyle() {\n    const style = { width: this.size, height: this.size };\n    // Determinate\n    if (this.value != null)\n      style.transform = 'rotate(-90deg)';\n    // Indeterminate\n    else\n      style.animation = 'spin 1.4s linear infinite';\n    return style;\n  }\n  get circleStyle() {\n    const style = { stroke: 'currentColor' };\n    if (this.value != null) {\n      // Determinate\n      style.transition = 'stroke-dashoffset 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n      style.strokeDasharray = CIRCUMFERENCE.toFixed(3);\n      style.strokeDashoffset = (((100 - this.value) / 100) * CIRCUMFERENCE).toFixed(3) + 'px';\n    }\n    else {\n      // Indeterminate\n      style.strokeDasharray = '80px, 200px';\n      style.strokeDashoffset = '0';\n      style.animation = 'indeterminate 1.4s ease-in-out infinite';\n    }\n    return style;\n  }\n  render() {\n    return (h(Host, { style: this.hostStyle, class: \"mx-circular-progress inline-block pointer-events-none\", role: \"progressbar\", \"aria-valuenow\": this.value != null ? Math.round(this.value) : null, \"aria-valuemin\": this.value != null ? 0 : null, \"aria-valuemax\": this.value != null ? 100 : null }, h(\"div\", { class: \"flex items-center justify-center relative h-full p-2\" }, h(\"svg\", { class: \"absolute\", viewBox: [DIAMETER / 2, DIAMETER / 2, DIAMETER, DIAMETER].join(' ') }, h(\"circle\", { style: this.circleStyle, cx: DIAMETER, cy: DIAMETER, r: RADIUS, \"stroke-width\": THICKNESS, fill: \"none\" })))));\n  }\n  get element() { return getElement(this); }\n  static get watchers() { return {\n    \"simulateProgressDuration\": [\"simulateProgress\"]\n  }; }\n};\n\nexport { MxCircularProgress as mx_circular_progress };\n"],"names":["DIAMETER","RADIUS","CIRCUMFERENCE","Math","PI","MxCircularProgress","hostRef","registerInstance","this","value","size","simulateProgressDuration","appearDelay","clearInterval","simulateProgressInterval","setInterval","min","simulateProgress","element","classList","remove","add","delayTimeout","setTimeout","clearTimeout","style","width","height","transform","animation","stroke","transition","strokeDasharray","toFixed","strokeDashoffset","h","Host","hostStyle","class","role","round","viewBox","join","circleStyle","cx","cy","r","fill","getElement"],"sourceRoot":""}