{"version":3,"file":"static/js/184.837a63a0.chunk.js","mappings":"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","sources":["../node_modules/@moxiworks/mds/dist/esm/minWidthSync-ff38ec9f.js","../node_modules/@moxiworks/mds/dist/esm/mx-tabs.entry.js","../node_modules/@moxiworks/mds/dist/esm/utils-eee50014.js"],"sourcesContent":["const SCREENS = {\n  'sm': '640px',\n  'md': '768px',\n  'lg': '1024px',\n  'xl': '1280px',\n  '2xl': '1536px',\n};\n/** A key-value pair of breakpoint abbreviations and a boolean for whether the `min-width` meets or exceeds it.\nFor example, `MinWidths.md` will be true for windows that are tablet-sized or larger */\nclass MinWidths {\n  constructor() {\n    this['sm'] = false;\n    this['md'] = false;\n    this['lg'] = false;\n    this['xl'] = false;\n    this['2xl'] = false;\n  }\n}\nclass MinWidthSync {\n  constructor() {\n    this.componentRefs = [];\n    this.minWidths = new MinWidths();\n    this.listeners = new Map();\n  }\n  subscribeComponent(componentRef) {\n    // If this is the first subscribed component, set up listeners.\n    if (this.componentRefs.length === 0)\n      this.addListeners();\n    this.componentRefs.push(componentRef);\n    // Immediately sync minWidths to component.\n    componentRef.minWidths = Object.assign({}, this.minWidths);\n  }\n  addListeners() {\n    Object.keys(SCREENS).forEach(screen => {\n      const mql = window.matchMedia(`(min-width: ${SCREENS[screen]})`);\n      const listener = (e) => {\n        this.minWidths[screen] = e.matches;\n        // Sync minWidths to all subscribed components\n        this.componentRefs.forEach(componentRef => {\n          componentRef.minWidths = Object.assign({}, this.minWidths);\n        });\n      };\n      listener(mql);\n      mql.addListener(listener);\n      this.listeners.set(mql, listener); // Store listener so it can be removed later\n    });\n  }\n  unsubscribeComponent(componentRef) {\n    this.componentRefs = this.componentRefs.filter(c => c !== componentRef);\n    // If no more subscribed components, remove listeners to prevent memory leaks.\n    if (this.componentRefs.length === 0)\n      this.removeListeners();\n  }\n  removeListeners() {\n    this.listeners.forEach((listener, mql) => {\n      mql.removeListener(listener);\n    });\n  }\n}\n/** Update subscribed components' `minWidths` state object based on `min-width` media query listeners. */\nconst minWidthSync = new MinWidthSync();\n\nexport { MinWidths as M, minWidthSync as m };\n","import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-42f8725f.js';\nimport { q as queryPrefersReducedMotion } from './utils-eee50014.js';\nimport { M as MinWidths, m as minWidthSync } from './minWidthSync-ff38ec9f.js';\n\nconst MxTabs = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.mxChange = createEvent(this, \"mxChange\", 7);\n    /** Stretch tabs to fill the entire width */\n    this.fill = false;\n    /** The index of the selected tab */\n    this.value = null;\n    this.minWidths = new MinWidths();\n  }\n  connectedCallback() {\n    minWidthSync.subscribeComponent(this);\n  }\n  animateIndicator(tabIndex, previousTabIndex) {\n    if (queryPrefersReducedMotion())\n      return;\n    if (tabIndex == null || previousTabIndex == null)\n      return;\n    // Find the distance between the clicked tab and the soon-to-be-deselected tab\n    const tabEls = this.element.querySelectorAll('.mx-tab');\n    const previousSelectedTab = tabEls[previousTabIndex];\n    const newSelectedTab = tabEls[tabIndex];\n    if (!previousSelectedTab || !newSelectedTab)\n      return;\n    const distance = previousSelectedTab.offsetLeft - newSelectedTab.offsetLeft;\n    const scaleX = previousSelectedTab.offsetWidth / newSelectedTab.offsetWidth;\n    const indicator = newSelectedTab.querySelector('.active-tab-indicator');\n    if (!indicator)\n      return;\n    // Position clicked tab's indicator under the tab that is being deselected\n    indicator.style.transform = `translateX(${distance}px) scale3d(${scaleX}, 1, 1)`;\n    indicator.style.transformOrigin = 'left';\n    indicator.style.transition = `none`;\n    // Transition the indicator back to the clicked tab\n    setTimeout(() => {\n      indicator.style.transform = `translateX(0) scale3d(1, 1, 1)`;\n      indicator.style.transition = `transform 0.25s cubic-bezier(0.4, 0, 0.2, 1)`;\n    }, 0);\n  }\n  disconnectedCallback() {\n    minWidthSync.unsubscribeComponent(this);\n  }\n  // Get the clicked tab's index and emit it via the mxChange event\n  onClick(e) {\n    const tab = e.target.closest('.mx-tab');\n    if (!tab)\n      return;\n    const tabs = this.element.querySelectorAll('.mx-tab');\n    const tabIndex = Array.prototype.indexOf.call(tabs, tab);\n    if (tabIndex >= 0)\n      this.mxChange.emit(tabIndex);\n  }\n  // When rendered as an mx-select, emit the select element's value via the mxChange event\n  onInput(e) {\n    this.mxChange.emit(+e.target.value);\n  }\n  // When true, render the tabs as an mx-select\n  get renderAsSelect() {\n    return !this.minWidths.md && this.tabs && this.tabs.length > 2;\n  }\n  get gridClass() {\n    let str = this.fill ? 'grid' : 'inline-grid';\n    str += ' grid-flow-col auto-cols-auto';\n    return str;\n  }\n  render() {\n    return (h(Host, { class: \"mx-tabs relative block\", role: \"tablist\" }, this.renderAsSelect ? (h(\"mx-select\", { value: this.value, onInput: this.onInput.bind(this), dense: true }, this.tabs.map((tab, index) => (h(\"option\", { value: index }, tab.label || tab.elAriaLabel))))) : (this.tabs && (h(\"div\", { class: this.gridClass }, this.tabs.map((tab, index) => (h(\"mx-tab\", Object.assign({ selected: this.value === index }, tab)))))))));\n  }\n  get element() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"animateIndicator\"]\n  }; }\n};\n\nexport { MxTabs as mx_tabs };\n","// https://github.com/ionic-team/capacitor/blob/b893a57aaaf3a16e13db9c33037a12f1a5ac92e0/cli/src/util/uuid.ts\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0;\n    const v = c == 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\nfunction queryPrefersReducedMotion() {\n  const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n  return !mediaQuery || mediaQuery.matches;\n}\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction isDateObject(val) {\n  if (typeof val !== 'object')\n    return false;\n  return 'getTime' in val && !isNaN(val.getTime()); // \"Invalid Date\" objects return NaN for getTime()\n}\n/** Converts a time string such as \"15:30\" or \"3:30PM\" into `{ hours: 15, minutes: 30 }` */\n/** @returns Time object, or `null` if the string could not be parsed as a valid time */\nfunction parseTimeString(str) {\n  if (str == null || str.trim() === '')\n    return;\n  const isExplicitAM = str.toLowerCase().includes('a');\n  const isExplicitPM = str.toLowerCase().includes('p');\n  const digits = str.replace(/[^0-9]/g, ''); // Remove non-numeric characters\n  if (!digits.length || digits.length > 4)\n    return null;\n  // If only 1 or 2 digits entered, assume only an hour was entered\n  let hours = digits.length <= 2 ? Number(digits) : Number(digits.slice(0, -2));\n  const minutes = digits.length <= 2 ? 0 : Number(digits.slice(-2));\n  if (hours === 12 && isExplicitAM)\n    hours = 0; // '12:00AM' -> 0 hours\n  if (hours < 12 && isExplicitPM)\n    hours += 12; // '2:00PM' -> 14 hours\n  if (hours > 23 || minutes > 59)\n    return null;\n  return { hours, minutes };\n}\n/** Returns the `clientX`, `clientY`, `pageX`, `pageY` from any MouseEvent or TouchEvent. */\nfunction getCursorCoords(e) {\n  if (e.changedTouches)\n    return e.changedTouches[0];\n  else if (e.touches)\n    return e.touches[0];\n  else\n    return e;\n}\n/** Returns a DOMRect for an element similar to getBoundingClientRect, however the\n * position ignores CSS transforms and accounts for scrolling. */\nfunction getPageRect(el) {\n  const { height, width } = el.getBoundingClientRect();\n  let top = 0;\n  let left = 0;\n  do {\n    top += el.offsetTop;\n    left += el.offsetLeft;\n    el = el.offsetParent;\n  } while (el);\n  return { top, left, width, height, bottom: top + height, right: left + width };\n}\n/** Return the client boundaries of an element (or the window) */\nfunction getBounds(container) {\n  if (container === window) {\n    return { top: 0, right: window.innerWidth, bottom: window.innerHeight, left: 0 };\n  }\n  return container.getBoundingClientRect();\n}\n/** Determines whether an element needs to be scrolled into view */\nfunction isScrolledOutOfView(el) {\n  const bounds = el.getBoundingClientRect(); // getBoundingClientRect accounts for CSS translate\n  const scrollBounds = getBounds(getScrollingParent(el));\n  if (bounds.top < scrollBounds.top)\n    return true;\n  if (bounds.bottom > scrollBounds.bottom)\n    return true;\n  if (bounds.left < scrollBounds.left)\n    return true;\n  if (bounds.left > scrollBounds.right)\n    return true; // It's okay if the right edge is out of bounds\n  return false;\n}\n/** Get the nearest scrolling ancestor, which could be the window */\nfunction getScrollingParent(el) {\n  if (!(el instanceof HTMLElement))\n    return window;\n  if (isScrollable(el))\n    return el;\n  return getScrollingParent(el.parentNode);\n}\nfunction isScrollable(el) {\n  const computedStyle = window.getComputedStyle(el);\n  const overflowRegex = /(auto|scroll)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n  return properties.find(property => overflowRegex.test(computedStyle[property]));\n}\n/** Remove data attributes from the host element, and store them in this.dataAttributes,\n * so they can be applied to the native element in the render function. */\nfunction propagateDataAttributes() {\n  Array.from(this.element.attributes).forEach((attribute) => {\n    if (!/^data-/.test(attribute.name))\n      return;\n    this.element.removeAttribute(attribute.name);\n    this.dataAttributes[attribute.name] = attribute.value;\n  });\n}\n\nexport { getCursorCoords as a, parseTimeString as b, capitalize as c, getScrollingParent as d, getBounds as e, isScrolledOutOfView as f, getPageRect as g, isDateObject as i, propagateDataAttributes as p, queryPrefersReducedMotion as q, uuidv4 as u };\n"],"names":["SCREENS","MinWidths","this","minWidthSync","MinWidthSync","componentRefs","minWidths","listeners","Map","componentRef","length","addListeners","push","Object","assign","keys","forEach","screen","mql","window","matchMedia","listener","e","matches","addListener","set","filter","c","removeListeners","removeListener","MxTabs","hostRef","registerInstance","mxChange","createEvent","fill","value","tabIndex","previousTabIndex","queryPrefersReducedMotion","tabEls","element","querySelectorAll","previousSelectedTab","newSelectedTab","distance","offsetLeft","scaleX","offsetWidth","indicator","querySelector","style","transform","transformOrigin","transition","setTimeout","tab","target","closest","tabs","Array","prototype","indexOf","call","emit","md","str","h","Host","class","role","renderAsSelect","onInput","bind","dense","map","index","label","elAriaLabel","gridClass","selected","getElement","uuidv4","replace","r","Math","random","toString","mediaQuery","capitalize","charAt","toUpperCase","slice","isDateObject","val","isNaN","getTime","parseTimeString","trim","isExplicitAM","toLowerCase","includes","isExplicitPM","digits","hours","Number","minutes","getCursorCoords","changedTouches","touches","getPageRect","el","getBoundingClientRect","height","width","top","left","offsetTop","offsetParent","bottom","right","getBounds","container","innerWidth","innerHeight","isScrolledOutOfView","bounds","scrollBounds","getScrollingParent","HTMLElement","computedStyle","getComputedStyle","overflowRegex","find","property","test","isScrollable","parentNode","propagateDataAttributes","from","attributes","attribute","name","removeAttribute","dataAttributes"],"sourceRoot":""}